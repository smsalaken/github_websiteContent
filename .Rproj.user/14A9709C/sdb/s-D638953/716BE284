{
    "collab_server" : "",
    "contents" : "---\ntitle: Dual y-axis in ggplot\nauthor: Salekin Mushfik\ndate: '2017-07-27'\nslug: dual-y-axis-in-ggplot\ncategories:\n  - visualization\ntags: [\"ggplot2\"]\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(collapse = TRUE)\n```\n\n\nDouble vertical axis is a fairly common requirement by the analysts. They often use plots with double y-axis to visualize two different variables where x-axis is common to both of them. While ggplot supports most type of graph, this particular kind is not supported. Hadley believes this type of graphs are fundamentally flawed and even went as far as saying he will never build such a graph in `ggplot2` package because:\n  \n  1. the points on such a graph are not invertible \n2. those plots often create confusion\n3. there are better ways to compare variables with same horizontal axis\n\nYou can see the full discussion here. https://stackoverflow.com/a/3101876/7860688\n\nBut, if you are not the one deciding what kind of graphs to build or do not want to lecture your client about plotting theory, here is a neat trick you can you. \n\n```{r eval=FALSE}\n# having a fill is important for bar and area if you want legends\np1 <- ggplot(df_processed_Gen, aes(x = FYE, y = SumGen, fill = \"#4B92DB\")) +   \n  geom_bar(stat = 'identity') +                                                \n  labs(x=\"FYE\", y=\"Sum of Generation\") +                                       \n  scale_fill_identity(name=\"\", guide=\"legend\", labels=c(\"sum(generation)\")) +\n  theme(legend.position=\"bottom\") +\n  ggtitle('Generator and CF information')\n\n\np2 <- ggplot(df_processed_CF, aes(x = FYE, y = SumCF, colour = 'sum(CF)')) + \n  geom_line(stat = 'identity') + \n  labs(x=\"FYE\", y=\"Sum of Capacity Factor\") +\n  theme_few() %+replace% \n  theme(panel.background = element_rect(fill = NA)) +\n  theme(legend.position=\"bottom\",\n        legend.title=element_blank())\n\n# hack for ggplots as it does not support dual axis\n# due it the conpect being inherently flawed in plotting thoery\n# See the discussion : https://stackoverflow.com/a/3101876/7860688\n\nlibrary(ggplot2)\nlibrary(gtable)\nlibrary(grid)\n\n\n# extract gtable\ng1 <- ggplot_gtable(ggplot_build(p1))\ng2 <- ggplot_gtable(ggplot_build(p2))\n\n# overlap the panel of 2nd plot on that of 1st plot\npp <- c(subset(g1$layout, name == \"panel\", se = t:r))\ng <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == \"panel\")]], pp$t, \n                     pp$l, pp$b, pp$l)\n\n# axis tweaks\nia <- which(g2$layout$name == \"axis-l\")   # depending on platform, this may change.\nga <- g2$grobs[[ia]]                      # use print(g$layout) to find the correct one\nax <- ga$children[[2]]\nax$widths <- rev(ax$widths)\nax$grobs <- rev(ax$grobs)\nax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, \"npc\") + unit(0.15, \"cm\")\ng <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)\ng <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)\n\n\nia2 <- which(g2$layout$name == \"ylab\")   # depending on platform, this may change.\nga2 <- g2$grobs[[ia2]]                   # use print(g$layout) to find the correct one\nga2$rot <- 90\ng <- gtable_add_cols(g, g2$widths[g2$layout[ia2, ]$l], length(g$widths) - 1)\ng <- gtable_add_grob(g, ga2, pp$t, length(g$widths) - 1, pp$b)\n\n\n# Extract legend. \n# Legends may not be present if they are not produced from ggplot() in p1 and p2\n# In that case, go back and edit your ggplot to produce legends. Otherwise, omit the following.   \nleg1 <- g1$grobs[[which(g1$layout$name == \"guide-box\")]]\nleg2 <- g2$grobs[[which(g2$layout$name == \"guide-box\")]]\n\ng$grobs[[which(g$layout$name == \"guide-box\")]] <- gtable:::cbind_gtable(leg1, leg2, \"first\")\n\n\n# g is the grob that should be used to draw the plot. We need grid package for that.\nlibrary(grid)\ngrid.newpage()\ngrid.draw(g)\n\n```\n",
    "created" : 1501120507984.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3114758971",
    "id" : "716BE284",
    "lastKnownWriteTime" : 1501120656,
    "last_content_update" : 1501120656634,
    "path" : "~/my_githubPageWebsite/hugo_webContent/content/post/2017-07-27-dual-y-axis-in-ggplot.Rmd",
    "project_path" : "content/post/2017-07-27-dual-y-axis-in-ggplot.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}